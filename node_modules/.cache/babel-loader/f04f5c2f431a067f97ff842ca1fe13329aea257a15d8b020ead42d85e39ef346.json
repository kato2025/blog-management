{"ast":null,"code":"var _jsxFileName = \"/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-management/src/components/PostForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { Editor } from '@tinymce/tinymce-react';\nimport AuthContext from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst TINYMCE_API_KEY = process.env.REACT_APP_TINYMCE_API_KEY;\nconst PostForm = ({\n  onPostCreated,\n  postToEdit\n}) => {\n  _s();\n  const {\n    token,\n    user\n  } = useContext(AuthContext);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [isUpdate, setIsUpdate] = useState(false);\n  useEffect(() => {\n    if (postToEdit) {\n      setTitle(postToEdit.title);\n      setContent(postToEdit.content);\n      setIsUpdate(true); // We are in update mode\n    }\n  }, [postToEdit]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Ensure the user is authenticated before attempting to create or update a post\n    if (!token || !user) {\n      alert(\"❌ You are not authenticated. Please log in.\");\n      return;\n    }\n\n    // Validate that title and content are not empty\n    if (!title.trim() || !content.trim()) {\n      alert(\"❌ Title and content cannot be empty.\");\n      return;\n    }\n    try {\n      const postData = {\n        title,\n        content,\n        authorId: user.id,\n        published: false // You can adjust this as needed\n      };\n      let response;\n      if (isUpdate) {\n        // If updating an existing post, make a PUT request\n        response = await axios.put(`${API_BASE_URL}/posts/${postToEdit.id}`,\n        // Assuming postToEdit contains the post ID\n        postData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        alert(\"✅ Post updated successfully!\");\n      } else {\n        // If creating a new post, make a POST request\n        response = await axios.post(`${API_BASE_URL}/posts`, postData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        alert(\"✅ Post created successfully!\");\n      }\n      console.log(isUpdate ? \"✅ Post updated successfully\" : \"✅ Post created successfully\", response.data);\n      setTitle('');\n      setContent('');\n      if (onPostCreated) onPostCreated(response.data);\n    } catch (error) {\n      // Log full error details for debugging\n      console.error(\"❌ Full Error Object:\", error);\n      if (error.response) {\n        var _error$response$data;\n        console.error(\"❌ Error Response:\", error.response);\n        const errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || JSON.stringify(error.response.data) || \"Unknown error\";\n        alert(`❌ Failed to update post: ${errorMessage}`);\n      } else {\n        alert(\"❌ Failed to update post: Unknown error\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: isUpdate ? \"Update Post\" : \"Create a New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        apiKey: TINYMCE_API_KEY,\n        value: content,\n        onEditorChange: newContent => setContent(newContent),\n        init: {\n          height: 300,\n          menubar: false,\n          plugins: 'link image code',\n          toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: isUpdate ? \"Update Post\" : \"Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(PostForm, \"mfPru80Gb9JtPaKA6RXGBvUYTA0=\");\n_c = PostForm;\nexport default PostForm;\nvar _c;\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["React","useState","useContext","useEffect","axios","Editor","AuthContext","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","TINYMCE_API_KEY","REACT_APP_TINYMCE_API_KEY","PostForm","onPostCreated","postToEdit","_s","token","user","title","setTitle","content","setContent","isUpdate","setIsUpdate","handleSubmit","e","preventDefault","alert","trim","postData","authorId","id","published","response","put","headers","Authorization","post","console","log","data","error","_error$response$data","errorMessage","message","JSON","stringify","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","required","apiKey","onEditorChange","newContent","init","height","menubar","plugins","toolbar","_c","$RefreshReg$"],"sources":["/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-management/src/components/PostForm.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { Editor } from '@tinymce/tinymce-react';\nimport AuthContext from '../context/AuthContext';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst TINYMCE_API_KEY = process.env.REACT_APP_TINYMCE_API_KEY;\n\nconst PostForm = ({ onPostCreated, postToEdit }) => {\n  const { token, user } = useContext(AuthContext);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  useEffect(() => {\n    if (postToEdit) {\n      setTitle(postToEdit.title);\n      setContent(postToEdit.content);\n      setIsUpdate(true);  // We are in update mode\n    }\n  }, [postToEdit]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Ensure the user is authenticated before attempting to create or update a post\n    if (!token || !user) {\n      alert(\"❌ You are not authenticated. Please log in.\");\n      return;\n    }\n\n    // Validate that title and content are not empty\n    if (!title.trim() || !content.trim()) {\n      alert(\"❌ Title and content cannot be empty.\");\n      return;\n    }\n\n    try {\n      const postData = {\n        title,\n        content,\n        authorId: user.id,\n        published: false,  // You can adjust this as needed\n      };\n\n      let response;\n\n      if (isUpdate) {\n        // If updating an existing post, make a PUT request\n        response = await axios.put(\n          `${API_BASE_URL}/posts/${postToEdit.id}`, // Assuming postToEdit contains the post ID\n          postData,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json',\n            },\n          }\n        );\n        alert(\"✅ Post updated successfully!\");\n      } else {\n        // If creating a new post, make a POST request\n        response = await axios.post(\n          `${API_BASE_URL}/posts`,\n          postData,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json',\n            },\n          }\n        );\n        alert(\"✅ Post created successfully!\");\n      }\n\n      console.log(isUpdate ? \"✅ Post updated successfully\" : \"✅ Post created successfully\", response.data);\n\n      setTitle('');\n      setContent('');\n      if (onPostCreated) onPostCreated(response.data);\n    } catch (error) {\n      // Log full error details for debugging\n      console.error(\"❌ Full Error Object:\", error);\n      if (error.response) {\n        console.error(\"❌ Error Response:\", error.response);\n        const errorMessage = error.response.data?.message || JSON.stringify(error.response.data) || \"Unknown error\";\n        alert(`❌ Failed to update post: ${errorMessage}`);\n      } else {\n        alert(\"❌ Failed to update post: Unknown error\");\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>{isUpdate ? \"Update Post\" : \"Create a New Post\"}</h3>\n      <div>\n        <label>Title:</label>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n      </div>\n      <div>\n        <label>Content:</label>\n        <Editor\n          apiKey={TINYMCE_API_KEY}\n          value={content}\n          onEditorChange={(newContent) => setContent(newContent)}\n          init={{\n            height: 300,\n            menubar: false,\n            plugins: 'link image code',\n            toolbar:\n              'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',\n          }}\n        />\n      </div>\n      <button type=\"submit\">{isUpdate ? \"Update Post\" : \"Create Post\"}</button>\n    </form>\n  );\n};\n\nexport default PostForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}